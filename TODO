EXCHANGE CODES

BTCE: BTC-e
BITFINEX: Bitfinex
MINTPAL: Mintpal
CRYPTSY: Cryptsy
KRAKEN: Kraken
BTER: Bter
POLONIEX: Poloniex
EXMONEY: ExMoney


MODULE STRUCTURE

-> Exchange module
--> Classes represent exchanges
--> Instantiate a class with an update function
--> Every frame it calls update with orderbook data structure below
--> Class implements initialize, frame, cleanup, balance, trade, and transfer

-> Brain module
--> Initialization
--> Cycle class
--> Starts all the exchange data modules with the same callback to update the data structure
--> Exchange data modules grab data in parallel, lock on data, brain attempts to do computations on data
--> Every time cycles are found brain creates new instance of cycle module and adds it to monitor list
--> Cycles consist of orders to be fulfilled
--> Currently running cycles' orders are removed from graph before attempting to find new cycles
--> Above is accomplished either in brain code or callback given to exchanges
--> Brain keeps track of profit so far and prints this out and other stats


DATA STRUCTURES


orderbook[CUR_1][CUR_2] = [{'ratio':1.02,'cost':0.0,'volume':30},...]
trade starting from CUR_1 ending in CUR_2
trading CUR_1 for CUR_2
ratio means if we have volume of CUR_1, we'll end up with volume*ratio of CUR_2
so ratio of 2 means executing the trade gives us about double the amount of CUR_2 as CUR_1 we traded
cost is the transaction cost for this trade, in terms of CUR_2
so executing this trade start with volume of CUR_1, end with ratio * volume - cost in CUR_2
cost usually refers to transaction fees, and will usually be negligible, so can often be ignored

orderbook[CUR_1][CUR_2]['ratio'] < 1.0/orderbook[CUR_2][CUR_1]['ratio']
(more ratio means more bang for your buck; immediate trades are terrible bangforbuck)


balance[CUR] = float
just a dictionary of balances


currency is formatted like
BTC_BTCE
LTC_POLONIEX
